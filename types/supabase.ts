/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/': {
		get: {
			responses: {
				/** OK */
				200: unknown;
			};
		};
	};
	'/profiles': {
		get: {
			parameters: {
				query: {
					user_id?: parameters['rowFilter.profiles.user_id'];
					created_at?: parameters['rowFilter.profiles.created_at'];
					username?: parameters['rowFilter.profiles.username'];
					/** Filtering Columns */
					select?: parameters['select'];
					/** Ordering */
					order?: parameters['order'];
					/** Limiting and Pagination */
					offset?: parameters['offset'];
					/** Limiting and Pagination */
					limit?: parameters['limit'];
				};
				header: {
					/** Limiting and Pagination */
					Range?: parameters['range'];
					/** Limiting and Pagination */
					'Range-Unit'?: parameters['rangeUnit'];
					/** Preference */
					Prefer?: parameters['preferCount'];
				};
			};
			responses: {
				/** OK */
				200: {
					schema: Array<definitions['profiles']>;
				};
				/** Partial Content */
				206: unknown;
			};
		};
		post: {
			parameters: {
				body: {
					/** profiles */
					profiles?: definitions['profiles'];
				};
				query: {
					/** Filtering Columns */
					select?: parameters['select'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** Created */
				201: unknown;
			};
		};
		delete: {
			parameters: {
				query: {
					user_id?: parameters['rowFilter.profiles.user_id'];
					created_at?: parameters['rowFilter.profiles.created_at'];
					username?: parameters['rowFilter.profiles.username'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
		patch: {
			parameters: {
				query: {
					user_id?: parameters['rowFilter.profiles.user_id'];
					created_at?: parameters['rowFilter.profiles.created_at'];
					username?: parameters['rowFilter.profiles.username'];
				};
				body: {
					/** profiles */
					profiles?: definitions['profiles'];
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferReturn'];
				};
			};
			responses: {
				/** No Content */
				204: never;
			};
		};
	};
	'/rpc/handle_new_user': {
		post: {
			parameters: {
				body: {
					args: Record<string, unknown>;
				};
				header: {
					/** Preference */
					Prefer?: parameters['preferParams'];
				};
			};
			responses: {
				/** OK */
				200: unknown;
			};
		};
	};
}

export interface definitions {
	profiles: {
		/**
		 * Format: uuid
		 * @description Note:
		 * This is a Primary Key.<pk/>
		 */
		user_id: string;
		/**
		 * Format: timestamp with time zone
		 * @default now()
		 */
		created_at?: string;
		/** Format: text */
		username?: string;
	};
}

export interface parameters {
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferParams: 'params=single-object';
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
	/**
	 * @description Preference
	 * @enum {string}
	 */
	preferCount: 'count=none';
	/** @description Filtering Columns */
	select: string;
	/** @description On Conflict */
	on_conflict: string;
	/** @description Ordering */
	order: string;
	/** @description Limiting and Pagination */
	range: string;
	/**
	 * @description Limiting and Pagination
	 * @default items
	 */
	rangeUnit: string;
	/** @description Limiting and Pagination */
	offset: string;
	/** @description Limiting and Pagination */
	limit: string;
	/** @description profiles */
	'body.profiles': definitions['profiles'];
	/** Format: uuid */
	'rowFilter.profiles.user_id': string;
	/** Format: timestamp with time zone */
	'rowFilter.profiles.created_at': string;
	/** Format: text */
	'rowFilter.profiles.username': string;
}

export interface operations {}

export interface external {}
